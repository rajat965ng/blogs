graph TD;
    A[Service] -->|Has| B[Non-functional requirements];
    B -->|Can share| C[Services with different functional requirements];
    C -->|Example| D[Caching to improve performance];
    C -->|Example| E[Only accept requests from registered users];
    A -->|Implement separately| F[Duplication of work or code];
    F -->|Result in| G[Errors or inefficiencies];
    G -->|Due to| H[Spread of engineering resources];
    H -->|Solution| I[Place code into libraries];
    I -->|Consequence| J[Library updates controlled by users];
    J -->|May continue running| K[Old versions with bugs];
    K -->|May also| L[Contain security problems];
    A -->|Separately run| M[Libraries on each host];
    M -->|Result in| N[Inability to independently scale functionalities];
    N -->|Solution| O[Centralize with API Gateway];
    O -->|Definition| P[API Gateway];
    P -->|Consists of| Q[Stateless machines];
    P -->|Located across| R[Several data centers];
    P -->|Provides common functionalities to| S[Organization's many services];
    S -->|Centralization of cross-cutting concerns| T[Across various services];
    S -->|Even if written in| U[Different programming languages];
    P -->|Should be| V[Kept simple];
    V -->|Despite many responsibilities| W[Amazon API Gateway and Kong are examples];
